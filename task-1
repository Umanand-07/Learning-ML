{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2292500,"sourceType":"datasetVersion","datasetId":1381830}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-27T13:11:46.903393Z","iopub.execute_input":"2024-07-27T13:11:46.903813Z","iopub.status.idle":"2024-07-27T13:11:46.909605Z","shell.execute_reply.started":"2024-07-27T13:11:46.903778Z","shell.execute_reply":"2024-07-27T13:11:46.908521Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load the dataset\n# Note: Replace 'file_path' with the correct path to your dataset in the Kaggle environment\n# Example path for datasets from competitions or uploaded: '/kaggle/input/dataset-name/file.csv'\nfile_path = '/kaggle/input/the-boston-houseprice-data/boston.csv'\ndata = pd.read_csv(file_path)\n\n# Display the first few rows of the dataset to verify loading\nprint(data.head())\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T13:16:30.672833Z","iopub.execute_input":"2024-07-27T13:16:30.673668Z","iopub.status.idle":"2024-07-27T13:16:30.707602Z","shell.execute_reply.started":"2024-07-27T13:16:30.673634Z","shell.execute_reply":"2024-07-27T13:16:30.706377Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features = ['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX' ]\ntarget = 'B'\n\n# Handling missing values (if any)\n# Depending on your data, you might need to fill missing values rather than drop them\ndata = data.dropna(subset=features + [target])\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T13:19:14.016996Z","iopub.execute_input":"2024-07-27T13:19:14.017707Z","iopub.status.idle":"2024-07-27T13:19:14.033563Z","shell.execute_reply.started":"2024-07-27T13:19:14.017657Z","shell.execute_reply":"2024-07-27T13:19:14.032211Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Splitting the data into features (X) and target (y)\nX = data[features]\ny = data[target]\n\n# Splitting the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initializing and training the linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Making predictions on the testing set\ny_pred = model.predict(X_test)\n\n# Evaluating the model\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"Mean Squared Error: {mse}\")\nprint(f\"R-squared: {r2}\")\n\n# Visualizing the relationship between actual and predicted prices\nplt.figure(figsize=(10, 6))\nplt.scatter(y_test, y_pred, alpha=0.7)\nplt.xlabel(\"Actual Prices\")\nplt.ylabel(\"Predicted Prices\")\nplt.title(\"Actual vs Predicted Prices\")\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T13:19:54.142350Z","iopub.execute_input":"2024-07-27T13:19:54.142822Z","iopub.status.idle":"2024-07-27T13:19:54.567989Z","shell.execute_reply.started":"2024-07-27T13:19:54.142781Z","shell.execute_reply":"2024-07-27T13:19:54.566704Z"},"trusted":true},"execution_count":null,"outputs":[]}]}